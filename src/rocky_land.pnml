/*
 * This file is part of OpenGFX+ Landscape.
 * OpenGFX+ Landscape is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenGFX+ Landscape is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenGFX+ Landscape. If not, see <http://www.gnu.org/licenses/>.
 */

#define var_groundsprite 1

// Spriteset of the 19 possible landslopes with rocks only
spriteset (rocks_overlay, "src/gfx/landscape_objects/rocks.gimp.png") { tmpl_groundsprites(1, 1) }
spriteset (rocks_swell, "src/gfx/landscape_objects/rocks_swell.gimp.png") { tmpl_groundsprites(1, 1) }

spritelayout rocky_land_layout {
	ground {
		// normal ground sprite - always draw
		sprite: LOAD_TEMP(var_groundsprite) + slope_to_sprite_offset(nearby_tile_slope(0, 0));
	}
	childsprite {
		sprite: rocks_overlay(slope_to_sprite_offset(nearby_tile_slope(0, 0)));
		always_draw: 1;
	}
	childsprite {
		sprite: rocks_swell(slope_to_sprite_offset(nearby_tile_slope(0, 0)));
		always_draw: 1;
		hide_sprite: ((openttd_version < version_openttd(1, 4, 0, 25230)) || (LOAD_TEMP(var_groundsprite) != base_sprite_shores) && nearby_tile_water_class(0, 0) != WATER_CLASS_SEA);
	}
}

// A pseudo-switch which sets the temporary parameters for the sprite layout

switch (FEAT_OBJECTS, SELF, rocky_land_arctic_decide_snow, [
			DECIDE_GROUND_ARCTIC,
			DECIDE_SHORE,
		]) {
	rocky_land_layout;
}
switch (FEAT_OBJECTS, SELF, rocky_land_tropic_decide_ground, [
			DECIDE_GROUND_TROPICAL,
			DECIDE_SHORE,
		]) {
	rocky_land_layout;
}
switch (FEAT_OBJECTS, SELF, rocky_land_normal_decide_ground, [
			DECIDE_GROUND_NORMAL,
			DECIDE_SHORE,
		] ) {
	rocky_land_layout;
}
switch (FEAT_OBJECTS, SELF, rocky_land_decide_climate,
		[
			STORE_TEMP(0, var_groundsprite), // + slope_to_sprite_offset(nearby_tile_slope(0,0)), 1),
			climate
		]) {
	CLIMATE_ARCTIC: rocky_land_arctic_decide_snow;
	CLIMATE_TROPIC: rocky_land_tropic_decide_ground;
	rocky_land_normal_decide_ground;
}



// Pseudo switch for the purchase list branch: we want to display the flat ground tile
spritelayout rocky_land_purchase_layout {
	ground {
		sprite: GROUNDSPRITE_NORMAL;
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
	}
	childsprite {
		sprite: rocks_overlay(0);
		always_draw: 1;
	}
}

item(FEAT_OBJECTS, rocky_land) {
	property {
		class:                  "LAND";
		classname:              string(STR_NAME_OBJCLASS_LANDSCAPE);
		name:                   string(STR_NAME_ROCKY_LAND);
		climates_available:     ALL_CLIMATES;
		size:                   [1, 1];
		build_cost_multiplier:  1;
		remove_cost_multiplier: 1;
		introduction_date:      date(1,1,1);
		end_of_life_date:       0xFFFFFFFF;
		object_flags:           bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ALLOW_BRIDGE, OBJ_FLAG_DRAW_WATER, OBJ_FLAG_ON_WATER, 13);
		height:                 0; // ground tile
		num_views:              1;
	}
	graphics {
		purchase:            rocky_land_purchase_layout;
		tile_check:          return CB_RESULT_LOCATION_ALLOW;
		additional_text:     return string(STR_NAME_ROCKY_LAND);
		default:             rocky_land_decide_climate;
	}
}

if (openttd_version > version_openttd(1,4,0,25880)) {
	item(FEAT_OBJECTS, rocky_land) {
		property {
			count_per_map256: 50;
		}
	}
}

#undef var_groundsprite
