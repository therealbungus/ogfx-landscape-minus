/*
 * This file is part of OpenGFX+ Landscape.
 * OpenGFX+ Landscape is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenGFX+ Landscape is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenGFX+ Landscape. If not, see <http://www.gnu.org/licenses/>.
 */

spriteset(wind_powerplant_set, "src/gfx/windfarm.png")  {
	tmpl_wind_powerplant( 10,  10)
	tmpl_wind_powerplant(110,  10)
	tmpl_wind_powerplant(210,  10)
	tmpl_wind_powerplant(310,  10)
	tmpl_wind_powerplant(410,  10)
	tmpl_wind_powerplant(510,  10)
	tmpl_wind_powerplant(610,  10)
	tmpl_wind_powerplant(710,  10)
	tmpl_wind_powerplant( 10, 160)
	tmpl_wind_powerplant(110, 160)
	tmpl_wind_powerplant(210, 160)
	tmpl_wind_powerplant(310, 160)
	tmpl_wind_powerplant(410, 160)
	tmpl_wind_powerplant(510, 160)
	tmpl_wind_powerplant(610, 160)
	[ 10+19, 10, 53, 113, -26, -96, "src/gfx/windfarm_ground.png"] // muddy base on ground
	[110+19, 10, 53, 113, -26, -96, "src/gfx/windfarm_ground.png"] // swell on sea water
}

spritelayout wind_powerplant_layout {
	ground { sprite: LOAD_TEMP(var_groundsprite) + slope_to_sprite_offset(nearby_tile_slope(0, 0)); }
	building {
		sprite: wind_powerplant_set((animation_frame + nearby_tile_random_bits(0,0)) % 15);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xextent: 16;
		yextent: 16;
		zextent: 96;
	}
	building {
		sprite: wind_powerplant_set(15 + (nearby_tile_water_class(0, 0) == WATER_CLASS_SEA && nearby_tile_slope(0, 0) == SLOPE_FLAT));
		hide_sprite: 0;
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xextent: 16;
		yextent: 16;
		zextent: 24;
	}
}

spriteset(wind_powerplant_purchase, "src/gfx/windfarm.png") { [729, 160, 53, 112, -31, -50] }
spritelayout wind_powerplant_purchase_layout {
	building {
		sprite: wind_powerplant_purchase;
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xextent: 16;
		yextent: 16;
		zextent: 52;
	}
}

switch (FEAT_OBJECTS, SELF, wind_powerplant_arctic_switch, [
			DECIDE_GROUND_ARCTIC,
			DECIDE_SHORE
		]) {
	wind_powerplant_layout;
}

switch (FEAT_OBJECTS, SELF, wind_powerplant_tropical_switch, [
			DECIDE_GROUND_TROPICAL,
			DECIDE_SHORE
		]) {
	wind_powerplant_layout;
}

switch (FEAT_OBJECTS, SELF, wind_powerplant_other_switch, [
			DECIDE_GROUND_NORMAL,
			DECIDE_SHORE
		]) {
	wind_powerplant_layout;
}

// Choose the graphics (for each animation frame) depending on the ground type
switch(FEAT_OBJECTS, SELF, wind_powerplant_graphics_switch, climate) {
	CLIMATE_ARCTIC: wind_powerplant_arctic_switch;
	CLIMATE_TROPICAL: wind_powerplant_tropical_switch;
	wind_powerplant_other_switch;
}

// Logic for the slope check callback
// Disallow the object to be built immediately adjacent
switch(FEAT_OBJECTS, SELF, wind_powerplant_nearby_check, object_distance(wind_powerplant)) {
	0..1: return string(STR_ERR_WIND_TURBINE_TOO_CLOSE);
	return CB_RESULT_LOCATION_ALLOW;
}

// Disallow only on steep slopes
switch(FEAT_OBJECTS, SELF, wind_powerplant_slope_check, (tile_slope & bitmask(IS_STEEP_SLOPE)) == 1) {
	1: return CB_RESULT_LOCATION_DISALLOW;
	wind_powerplant_nearby_check;
}

/* Editor placement rules */
switch(FEAT_OBJECTS, SELF, wind_powerplant_land_check, nearby_tile_is_water(0, 0)) {
	1: return CB_RESULT_LOCATION_DISALLOW;
	wind_powerplant_slope_check;
}

/* Additional placement rules for editor & map generation */
switch(FEAT_OBJECTS, SELF, wind_powerplant_editor_check, game_mode) {
	GAMEMODE_EDITOR: wind_powerplant_land_check;
	wind_powerplant_slope_check;
}

item(FEAT_OBJECTS, wind_powerplant) {
	property {
		class:                  "INFR";
		classname:              string(STR_NAME_OBJCLASS_INFRASTRUCTURE);
		name:                   string(STR_NAME_WIND_TURBINE);
		climates_available:     ALL_CLIMATES;
		size:                   [1, 1];
		build_cost_multiplier:  50;
		remove_cost_multiplier: 75;
		introduction_date:      date(1985,1,1);
		end_of_life_date:       0xFFFFFFFF;
		animation_info:         [ANIMATION_LOOPING, 16];
		animation_speed:        2;
		animation_triggers:     3; // periodic tile loop
		object_flags:           bitmask(OBJ_FLAG_ON_WATER, OBJ_FLAG_DRAW_WATER, OBJ_FLAG_ANIMATED, OBJ_FLAG_NO_FOUNDATIONS );
		height:                 16; // 128 pixel
	}
	graphics {
		purchase:        wind_powerplant_purchase_layout;
		anim_control:    return CB_RESULT_NEXT_FRAME;
		anim_next_frame: return CB_RESULT_NEXT_FRAME;
		autoslope:       return CB_RESULT_AUTOSLOPE;
		tile_check:      wind_powerplant_editor_check;
		additional_text: return string(STR_NAME_WIND_TURBINE);
		wind_powerplant_graphics_switch;
	}
}

if (openttd_version > version_openttd(1, 4, 0, 25880)) {
	item(FEAT_OBJECTS, wind_powerplant) {
		property {
			count_per_map256: 16;
		}
	}
}
